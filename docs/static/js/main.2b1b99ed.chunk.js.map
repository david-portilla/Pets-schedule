{"version":3,"sources":["components/Appointment.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Appointment","appointment","removeAppointment","className","petName","owner","date","hour","symptoms","onClick","id","Form","createAppointment","useState","updateAppointment","error","updateError","updateState","e","target","name","value","onSubmit","preventDefault","trim","uuid","type","placeholder","onChange","App","initialAppointments","JSON","parse","localStorage","getItem","appointments","saveAppointment","useEffect","setItem","stringify","newAppointments","filter","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b1b99ed.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Appointment = ({ appointment, removeAppointment }) => (\n  <>\n    <div className=\"cita\">\n      <p>Pet Name: <span>{ appointment.petName }</span></p>\n      <p>Owner: <span>{ appointment.owner }</span></p>\n      <p>Date: <span>{ appointment.date }</span></p>\n      <p>Hour: <span>{ appointment.hour }</span></p>\n      <p>Symptoms: <span>{ appointment.symptoms }</span></p>\n\n      <button\n        className=\"button eliminar u-full-width\"\n        onClick={ () => removeAppointment(appointment.id) }\n      >\n        Eliminar &times;\n      </button>\n    </div>\n    <br />\n  </>\n)\n\nAppointment.propTypes = {\n  appointment: PropTypes.object.isRequired,\n  removeAppointment: PropTypes.func.isRequired,\n}\n\nexport default Appointment\n","import React, { useState } from 'react'\nimport uuid from \"uuid/v4\";\nimport PropTypes from 'prop-types'\n\nexport const Form = ({ createAppointment }) => {\n\n  const [ appointment, updateAppointment ] = useState({\n    petName: '',\n    owner: '',\n    date: '',\n    hour: '',\n    symptoms: ''\n  })\n\n  const [ error, updateError ] = useState(false)\n\n  const updateState = (e) => {\n    updateAppointment({\n      ...appointment,\n      [ e.target.name ]: e.target.value\n    })\n  }\n\n  const { petName, owner, date, hour, symptoms } = appointment\n\n  const submitAppointment = (e) => {\n    e.preventDefault()\n    // validate empty fields\n    if (petName.trim() === '' || owner.trim() === '' || date.trim() === '' || hour.trim() === '' || symptoms.trim() === '') {\n      updateError(true)\n      return\n    }\n    // remove error msg\n    updateError(false)\n    // add unique ID to each appointment\n    appointment.id = uuid()\n    // send appointment data object\n    createAppointment(appointment)\n    // reset form with empty state\n    updateAppointment({\n      petName: '',\n      owner: '',\n      date: '',\n      hour: '',\n      symptoms: ''\n    })\n  }\n\n  return (\n    <>\n      <h2>add appointment</h2>\n\n      {error ? <p className=\"alerta-error\">All the fields are mandatory</p> : null }\n\n      <form\n        onSubmit={ submitAppointment }\n      >\n\n        <label>Name</label>\n        <input\n          type=\"text\"\n          name=\"petName\"\n          className=\"u-full-width\"\n          placeholder=\"Pet name\"\n          onChange={ updateState }\n          value={ petName }\n        />\n\n        <label>Owner</label>\n        <input\n          type=\"text\"\n          name=\"owner\"\n          className=\"u-full-width\"\n          placeholder=\"Owner name\"\n          onChange={ updateState }\n          value={ owner }\n        />\n\n        <label>Date</label>\n        <input\n          type=\"date\"\n          name=\"date\"\n          className=\"u-full-width\"\n          onChange={ updateState }\n          value={ date }\n        />\n\n        <label>Hour</label>\n        <input\n          type=\"time\"\n          name=\"hour\"\n          className=\"u-full-width\"\n          onChange={ updateState }\n          value={ hour }\n        />\n\n        <label>Symptoms</label>\n        <textarea\n          name=\"symptoms\"\n          className=\"u-full-width\"\n          onChange={ updateState }\n          value={ symptoms }\n        ></textarea>\n\n        <button\n          type=\"submit\"\n          className=\"u-full-width button-primary\"\n        > Create appointment</button>\n\n      </form>\n    </>\n  )\n}\n\nForm.propTypes = {\n  createAppointment: PropTypes.func.isRequired\n}\n","import React, { useState, useEffect } from 'react'\nimport Appointment from './components/Appointment';\nimport { Form } from './components/Form';\n\nfunction App () {\n  // reading appointments from local storage\n  let initialAppointments = JSON.parse(localStorage.getItem('appointments'))\n  if (!initialAppointments) {\n    initialAppointments = []\n  }\n  // set state\n  const [ appointments, saveAppointment ] = useState(initialAppointments)\n\n  // listening changes on state using useEffect\n  useEffect(() => {\n    if (initialAppointments) {\n      localStorage.setItem('appointments', JSON.stringify(appointments))\n    } else {\n      localStorage.setItem('appointments', JSON.stringify([]))\n    }\n  }, [ appointments ])\n\n  // adding new appointment\n  const createAppointment = appointment => {\n    saveAppointment([\n      ...appointments,\n      appointment\n    ])\n  }\n\n  // remove appointments by id\n  const removeAppointment = id => {\n    const newAppointments = appointments.filter(appointment => appointment.id !== id)\n    saveAppointment(newAppointments)\n  }\n\n  return (\n    <>\n      <h1>Pets-schedule</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n\n          <div className=\"one-half column\">\n            <Form\n              createAppointment={ createAppointment }\n            />\n          </div>\n\n          <div className=\"one-half column\">\n            { appointments.length > 0 ? <h2>Manage your dates</h2> : <h2>Add a new appointment</h2> }\n            { appointments.map(appointment => (\n              <Appointment\n                key={ appointment.id }\n                appointment={ appointment }\n                removeAppointment={ removeAppointment }\n              />\n            ))\n            }\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}